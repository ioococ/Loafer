package collection.generics;

import java.util.ArrayList;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;

public class Generics {
    public static void main(String[] args) {
        Map<String, Integer> map = new TreeMap<>();
        map.put("a", 123);
        map.put("b", 61);
        map.put("c", 33);
        map.put("d", 48);
        map.put("e", 49);
        map.put("f", 1);
        map.put("g", 21);
        map.put("h", 11);
        map.put("i", 4);
        Set<Entry<String, Integer>> entrySet = map.entrySet();
        ArrayList<Entry<String, Integer>> entries = new ArrayList<>(entrySet);
        entries.sort((o1, o2) -> o1.getValue() - o2.getValue());
        System.out.println(entries);
    }
}

package collection.generics.map;

public class ABC {
    public static void main(String[] args) {
		
	}
}

package collection.generics.map;

import java.util.HashMap;

public class Hash {
    public static void main(String[] args) {
        HashMap<String, Integer> hashMap = new HashMap<>();
        hashMap.put("a", 1);
    }
}

package collection.list;

/**
 * 封装数组,提供增删改查等方法,方便操作
 * 
 * @author 天亮教育-帅气多汁你泽哥
 * @Date 2023年10月17日
 */
public class Array {
	private Object[] elements = new Object[0];

	/**
	 * 添加方法
	 * 
	 * @param element
	 */
	public void add(Object element) {
		Object[] newArr = new Object[elements.length + 1];
		for (int i = 0; i < elements.length; i++) {
			newArr[i] = elements[i];
		}
		newArr[newArr.length - 1] = element;
		elements = newArr;
	}

	/**
	 * 根据下标删除
	 * 
	 * @param index
	 */
	public void remove(int index) {
		// 判断是否越界
		if (index < 0 || index >= elements.length) {
			throw new ArrayIndexOutOfBoundsException(index);
		}
		// 创建新数组,长度为原数组长度-1
		Object[] newArr = new Object[elements.length - 1];
		// 遍历原数组,把非element的值添加到新数组中
		int newArrIndex = 0;
		for (int i = 0; i < elements.length; i++) {
			if (index == i) {
				continue;
			} else {
				newArr[newArrIndex] = elements[i];
				newArrIndex++;
			}
		}
		elements = newArr;

	}

	/**
	 * 根据元素内容删除,只删除第一个符合条件的
	 * 
	 * @param element
	 */
	public void remove(Object element) {
		// 判断是否包含这个元素,如果包含,则获取第一个出现该元素的下标
		int index = indexOf(element);
		if (index != -1) {
			remove(index);
			// // 创建新数组,长度为原数组长度-1
			// Object[] newArr = new Object[elements.length - 1];
			// // 遍历原数组,把非element的值添加到新数组中
			// int newArrIndex = 0;
			// for (int i = 0; i < elements.length; i++) {
			// if (index == i) {
			// continue;
			// } else {
			// newArr[newArrIndex] = elements[i];
			// newArrIndex++;
			// }
			// }
			// elements = newArr;
		}

	}

	/**
	 * 根据元素内容删除,删除所有与指定元素相同的数据
	 * 
	 * @param element
	 */
	public void removeAll(Object element) {
		// 统计多少相同元素个数
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (elements[i].equals(element)) {
				count++;
			}
		}
		if (count == 0) {
			return;
		}
		// 确定新数组长度
		Object[] newArr = new Object[elements.length - count];
		// 循环遍历复制新数组中
		int newArrIndex = 0;
		for (int i = 0; i < newArr.length; i++) {
			if (elements[i].equals(element)) {
				continue;
			} else {
				newArr[newArrIndex] = elements[i];
				newArrIndex++;
			}
		}
		elements = newArr;
	}

	/**
	 * 根据元素获取下标,找不到则返回-1
	 * 
	 * @param element
	 * @return
	 */
	public int indexOf(Object element) {

		for (int i = 0; i < elements.length; i++) {
			if (elements[i].equals(element)) {
				return i;
			}
		}
		return -1;
	}

	/**
	 * 判断是否包含某个元素
	 * 
	 * @param element
	 * @return
	 */
	public boolean contains(Object element) {
		for (int i = 0; i < elements.length; i++) {
			if (elements[i].equals(element)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * 修改
	 * 
	 * @param index
	 */
	public void set(int index, Object element) {
		elements[index] = element;
	}

	/**
	 * 根据下标查询元素
	 * 
	 * @param index
	 * @return
	 */
	public Object get(int index) {
		return elements[index];
	}

	/**
	 * 数组遍历
	 */
	public void forEach() {
		for (int i = 0; i < elements.length; i++) {
			System.out.println(elements[i]);
		}
	}

	/**
	 * 获取数组长度
	 * 
	 * @return
	 */
	public int length() {
		return elements.length;
	}
}

package collection.list;

/**
 * 封装数组,提供增删改查等方法,方便操作
 * 
 * @author 天亮教育-帅气多汁你泽哥
 * @Date 2023年10月17日
 */
public class ArrayPlus {
	/**
	 * 默认容量为0,第一次添加时初始化容量为10,默认扩容倍数为1.5倍
	 */
	private Object[] elements = new Object[0];

	/**
	 * 已添加元素个数
	 */
	private int size = 0;

	/**
	 * 添加方法
	 * 
	 * @param element
	 */
	public void add(Object element) {
		// 判断是否初始化
		if (elements.length == 0) {
			elements = new Object[10];
		}
		int length = elements.length;

		// 判断是否放满了
		if (size == length) {
			// 扩容为1.5倍
			int newLength = length + (length >> 1);
			// 创建新数组
			Object[] newArr = new Object[newLength];
			// 把源数组内容复制进新数组中去
			for (int i = 0; i < elements.length; i++) {
				newArr[i] = elements[i];
			}
			// 把新数组复制给elements
			elements = newArr;
		}
		// 添加新数组
		// 1 2 3 4 5 0 0 0 0 size = 5
		// 1 2 3 4 5 6 0 0 0
		elements[size] = element;
		size++;
	}

	/**
	 * 根据下标删除
	 * 
	 * @param index
	 */
	public void remove(int index) {
		// 判断是否越界
		if (index < 0 || index >= size) {
			throw new ArrayIndexOutOfBoundsException(index);
		}
		// 1 2 4 5 null null null 0 0 0 size = 4 length = 10 index = 2
		// 从 index+1 开始 到 size-1 都向前移动一位
		for (int i = index; i < size - 1; i++) {
			elements[i] = elements[i + 1];
		}
		// size-1 赋值为 null
		elements[size - 1] = null;
		// size--
		size--;
	}

	/**
	 * 根据元素内容删除,只删除第一个符合条件的
	 * 
	 * @param element
	 */
	public void remove(Object element) {
		// 判断是否包含这个元素,如果包含,则获取第一个出现该元素的下标
		int index = indexOf(element);
		if (index != -1) {
			remove(index);
			// // 创建新数组,长度为原数组长度-1
			// Object[] newArr = new Object[elements.length - 1];
			// // 遍历原数组,把非element的值添加到新数组中
			// int newArrIndex = 0;
			// for (int i = 0; i < elements.length; i++) {
			// if (index == i) {
			// continue;
			// } else {
			// newArr[newArrIndex] = elements[i];
			// newArrIndex++;
			// }
			// }
			// elements = newArr;
		}

	}

	/**
	 * 根据元素内容删除,删除所有与指定元素相同的数据
	 * 
	 * @param element
	 */
	public void removeAll(Object element) {
		// int index = indexOf(element);
		// while (index != -1) {
		// remove(index);
		// index = indexOf(element);
		// }
		// 1 1 1 2 2 2 5 null 5 null size = 9 length = 10 e=3 c=7
		int count = 0;
		for (int i = 0; i < size; i++) {
			if (!elements[i].equals(element)) {
				elements[count] = elements[i];
				count++;
			}
		}
		// 把删除的元素 赋值为null
		for (int i = count; i < size; i++) {
			elements[i] = null;
		}
		// 重新设置size的值
		size = count;
	}

	/**
	 * 根据元素获取下标,找不到则返回-1
	 * 
	 * @param element
	 * @return
	 */
	public int indexOf(Object element) {

		for (int i = 0; i < size; i++) {
			if (elements[i].equals(element)) {
				return i;
			}
		}
		return -1;
	}

	/**
	 * 判断是否包含某个元素
	 * 
	 * @param element
	 * @return
	 */
	public boolean contains(Object element) {
		// for (int i = 0; i < size; i++) {
		// if (elements[i].equals(element)) {
		// return true;
		// }
		// }
		int index = indexOf(element);
		return index != -1 ? true : false;
	}

	/**
	 * 修改
	 * 
	 * @param index
	 */
	public void set(int index, Object element) {
		// 1 2 3 4 5 0 0 0 0 0
		if (index < 0 || index >= size) {
			throw new ArrayIndexOutOfBoundsException(index);
		}
		elements[index] = element;
	}

	/**
	 * 根据下标查询元素
	 * 
	 * @param index
	 * @return
	 */
	public Object get(int index) {
		if (index < 0 || index >= size) {
			throw new ArrayIndexOutOfBoundsException(index);
		}
		return elements[index];
	}

	/**
	 * 数组遍历
	 */
	public void forEach() {
		for (int i = 0; i < size; i++) {
			System.out.println(elements[i]);
		}
	}

	/**
	 * 获取数组元素个数
	 * 
	 * @return
	 */
	public int size() {
		return size;
	}
}

package collection.list;

import java.util.LinkedList;

public class Linked {
	public static void main(String[] args) {
		LinkedList linked = new LinkedList<>();
		linked.removeFirst();
		// linked.li
	}
}

package collection.list;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

@SuppressWarnings("all")
public class ListSort {
	public static void main(String[] args) {
		List<Integer> list = new ArrayList<>();
		list.add(1);
		list.add(11);
		list.add(12);
		list.add(2);
		// 使用API进行排序,会调用 元素的compareTo 方法进行排序
		Collections.sort(list);

		// 如果 要添加的元素,排序规则不符合我们需求,或,元素没有 compareTo方法,则使用Comparator
		Collections.sort(list, new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {
				if (o1 instanceof Integer && o2 instanceof Integer) {
					Integer i1 = (Integer) o1;
					Integer i2 = (Integer) o2;
					return i2 - i1;
				}
				return 0;
			}
		});

		// 使用集合自身的排序,需要传入 Comparator 比较器进行比较
		list.sort(new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {
				if (o1 instanceof Integer && o2 instanceof Integer) {
					Integer i1 = (Integer) o1;
					Integer i2 = (Integer) o2;
					return i1 - i2;
				}
				return 0;
			}
		});

		System.out.println(list);

	}
}

package collection.list;

import java.util.ArrayList;

public class Test {
	public static void main(String[] args) {
		ArrayList<? super Number> array = new ArrayList<>();
		array.add(1);

	}
}

package collection.quiz;

import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;

/**
 * @Author: nekotako
 * @Description: 给出一个字符串, 只包括大小写字母 计算字符串中,每个字符出现的次数,并以出现次数降序排序
 * @Date: 2023/10/19 19:34 星期四
 */

public class Sort {
    public static void main(String[] args) {
        String s = "abzxccasjlkjlexcvlphvcsddqfsdfwdasde";
        char[] charArray = s.toCharArray();
        TreeMap<Character, Integer> charMap = new TreeMap<>();
        for (int i = 0; i < charArray.length; i++) {
            if (charMap.containsKey(charArray[i])) {
                charMap.put(charArray[i], charMap.get(charArray[i]) + 1);
            } else {
                charMap.put(charArray[i], 1);
            }
        }
        // 对 charMap 进行排序
        ArrayList<Map.Entry<Character, Integer>> entries = new ArrayList<>(charMap.entrySet());
        entries.sort((o1, o2) -> o2.getValue() - o1.getValue());
        for (Map.Entry<Character, Integer> entry : entries) {
            System.out.print(entry.getKey() + "(" + entry.getValue() + ")");
        }

    }
}

package collection.quiz;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.TreeSet;

/**
 * @Author: nekotako
 * @Description: String默认按照每位ASCII进行排序,要求按照对应的数值大小进行排序
 * @Date: 2023/10/19 16:41 星期四
 */

public class StringSort {
    public static void main(String[] args) {
        List<String> list = new ArrayList<String>();
        list.add("1");
        list.add("2");
        list.add("10");
        list.add("12");
        list.add("3");
        TreeSet<String> strings = new TreeSet<>(list);
        // 1 10 12 2 3
        list = new ArrayList<>(strings);
        System.out.println(strings);
        list.sort((o1, o2) -> Integer.parseInt(o1) - Integer.parseInt(o2));
        // TODO 在这里加入一些代码使下面的输出变成 1 2 3 10 12(不能删除数据和新增数据)
        System.out.println(list);
    }
}

package collection.quiz;

import java.util.ArrayList;
import java.util.TreeMap;

/**
 * @Author: nekotako
 * @Description: 杨辉三角, 使用Map和List实现
 * @Date: 2023/10/19 16:52 星期四
 */

@SuppressWarnings({"unchecked"})
public class Triangle {
    public static void main(String[] args) {
        TreeMap<Integer, ArrayList<Integer>> triangle = new TreeMap<>();
        for (int i = 1; i < 11; i++) {
            ArrayList<Integer> list = new ArrayList<>();
            if (i == 1)
                list.add(1);
            else if (i == 2) {
                list.add(1);
                list.add(1);
            } else {
                for (int j = 0; j <= i - 1; j++) {
                    if (j == 0 || j == i - 1)
                        list.add(1);
                    else {
                        ArrayList<Integer> temp = triangle.get(i - 1);
                        list.add(temp.get(j) + temp.get(j - 1));
                    }
                }
            }
            triangle.put(i, list);
        }
        System.out.println(triangle);
    }
}

package collection.set;

import java.util.HashSet;

public class Hash {
    public static void main(String[] args) {
        HashSet<Object> hashMap = new HashSet<>();
    }
}

package collection.set;

import java.util.TreeSet;

public class Tree {
	public static void main(String[] args) {
		TreeSet<Object> tree = new TreeSet<>();
		tree.add(new User("张三",18));
		tree.add(new User("李四",13));
		tree.add(new User("王五",32));
		tree.add(new User("赵六",11));
		System.out.println(tree);
	}
}

package collection.set;

import java.util.Comparator;
import java.util.TreeSet;

@SuppressWarnings("all")
public class UnNamed {
	public static void main(String[] args) {
		// TreeSet<Object> tree = new TreeSet<>(new MyComparator());
		TreeSet<Object> tree = new TreeSet<>(new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {
				if (o1 instanceof Integer && o2 instanceof Integer) {
					// o1 是要添加的元素
					// System.out.println(o1);
					// o2 是集合中的元素
					// System.out.println(o2);

					Integer i1 = (Integer) o1;
					Integer i2 = (Integer) o2;
					// 10-9 降序排列
					return i2 - i1;
				}
				return 0;
			}
		});
		tree.add(11);
		tree.add(7611);
		tree.add(1);
		tree.add(100);
		tree.add(660);
		tree.add(98);
		System.out.println(tree);
	}
}

class MyComparator implements Comparator {

	@Override
	public int compare(Object o1, Object o2) {
		if (o1 instanceof Integer && o2 instanceof Integer) {
			// o1 是要添加的元素
			// System.out.println(o1);
			// o2 是集合中的元素
			// System.out.println(o2);

			Integer i1 = (Integer) o1;
			Integer i2 = (Integer) o2;
			// 10-9 降序排列
			return i2 - i1;
		}
		return 0;
	}
}

package collection.set;

public class User implements Comparable {
	private String name;
	private int age;

	public User() {
	}

	public User(String name, int age) {
		this.name = name;
		this.age = age;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	@Override
	public String toString() {
		return "User [name=" + name + ", age=" + age + "]";
	}

	@Override
	public int compareTo(Object o) {
		if (o instanceof User) {
			User u = (User) o;
			// this.getAge() - u.getAge()大于1 升序排序
			return this.getAge() - u.getAge();
		}
		return 0;
	}

}

package io;

public class Copy {
    
}

package io.file;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class FileCopy {
    public static void main(String[] args) throws IOException {
        FileCopy fc = new FileCopy();
        File files = new File("E:\\Documents"); 
        fc.copy(files);
    }

    public boolean copy(File sourceFile) throws IOException {
        if (sourceFile.isFile()) {
            String sourceAbsolutePath = sourceFile.getAbsolutePath();
            String target = "D" + sourceAbsolutePath.substring(1);
            File parentFolder = new File(target).getParentFile();

            if (parentFolder.exists()) {
                FileInputStream fileInputStream = new FileInputStream(sourceAbsolutePath);
                FileOutputStream fileOutputStream = new FileOutputStream(target);
                BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
                BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream);
                byte[] bytes = new byte[bufferedInputStream.available()];
                int temp = 0;
                System.out.println("复制 : " + sourceAbsolutePath);
                while ((temp = bufferedInputStream.read(bytes)) != -1) {
                    bufferedOutputStream.write(bytes, 0, temp);
                    bufferedOutputStream.flush();
                }
            } else {
                parentFolder.mkdirs();
            }

        } else {
            File[] folders = sourceFile.listFiles();
            for (File subFile : folders) {
                copy(subFile);
            }
        }
        return false;
    }
}

package io.file;

import java.io.File;

public class FileMethod {
    public static void main(String[] args) {
        File file = new File("null");
        file.delete();
        file.getName();
        file.getParent();
        file.exists();
    }
}

package io;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;

public class FileInput {
    public static void main(String[] args) throws IOException {
        FileInput fileInput = new FileInput();
        long startTime = System.currentTimeMillis();
        fileInput.fileInputStream();
        // fileInput.fileReader();
        long endTime = System.currentTimeMillis();
        System.out.println(endTime - startTime);
    }

    public void fileReader() throws IOException {
        FileReader fileReader = new FileReader("./API/src/io/FileInput.java");
        char[] buffer = new char[1024];
        int read = 0;
        while ((read = fileReader.read(buffer)) != -1) {
            System.out.println(new String(buffer, 0, read));
        }
        fileReader.close();
    }

    public void fileInputStream() throws IOException {
        FileInputStream fileInputStream = new FileInputStream("./API/src/io/FileInput.java");
        BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
        byte[] buffer = new byte[1024];
        int read = 0;
        while ((read = fileInputStream.read(buffer)) != -1) {
            System.out.print(new String(buffer, 0, read));
        }
        fileInputStream.close();

    }
}

package io;

import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;

public class FileOutput{
    public static void main(String[] args) throws IOException {
        FileOutput fileOutput = new FileOutput();
        fileOutput.fileWriter();
    }
    public void fileWriter() throws IOException{
        FileWriter fileWriter = new FileWriter("./API/src/io/test");
        fileWriter.write("apple");
        fileWriter.flush();
        fileWriter.close();
    }
    public void fileOutputStream() throws IOException{
        FileOutputStream fileOutputStream = new FileOutputStream("null");
		fileOutputStream.write(97);
		byte[] bytes = { 97, 98, 99, 100, 101, 102 };
		fileOutputStream.write(bytes);
		fileOutputStream.write(bytes, 0, 3);
		// 没有提供写出字符串的方法,想要写出字符串需要先转换为字节数组
		bytes = "你好吗?".getBytes();
		fileOutputStream.write(bytes);
		fileOutputStream.flush();
		fileOutputStream.close();
    }
}

package ioquiz;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

/**
 * @Author: nekotako
 * @Description: TODO
 * @Date: 2023/10/23 19:52 星期一
 */

public class JavaMerge {

    static ArrayList<File> javaFiles = new ArrayList<>();
    public static void main(String[] args) throws IOException {
        File Root = new File("./");
        Merge m = new Merge();
        JavaMerge.getJavaFiles(Root);
        System.out.println(javaFiles);
        for (File javaFile : javaFiles) {
            m.merge(javaFile,new File("./resources/JavaMerge.txt"));
//            m.merge(javaFile,new File("./resources/JavaMerged.txt"));
        }
    }
    public static void getJavaFiles(File folder){
        if (folder.isFile()){
            File files = folder;
            if (files.getName().endsWith(".java")){
                javaFiles.add(files);
                System.out.println(files);
            }
        } else {
            File[] subFiles = folder.listFiles();
            for (File subFile : subFiles) {
                getJavaFiles(subFile);
            }
        }
    }
}

package ioquiz;

import java.io.*;
/**
 * @Author: nekotako
 * @Description: TODO
 * @Date: 2023/10/23 19:00 星期一
 */
public class Merge {
    public static void main(String[] args) throws IOException {
        Merge m = new Merge();
        File[] files = new File[3];
        files[0] = new File("./resources/one.txt");
        files[1] = new File("./resources/two.txt");
        files[2] = new File("./resources/three.txt");
        for (int i = 0; i < files.length; i++) {
            m.merge(files[i], new File("./resources/merge.txt"));
        }
    }

    public boolean merge(File sourceFile, File targetFile) throws IOException {
        FileInputStream fileInputStream = new FileInputStream(sourceFile);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
        FileOutputStream fileOutputStream = new FileOutputStream(targetFile, true);
        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream);
        byte[] bytes = new byte[bufferedInputStream.available()];
        int temp = 0;
        while ((temp = bufferedInputStream.read(bytes)) != -1) {
            bufferedOutputStream.write(bytes, 0, temp);
            bufferedOutputStream.write("\n".getBytes());
            bufferedOutputStream.flush();
            System.out.println(sourceFile.getName()+" 写入完成");
        }
        bufferedInputStream.close();
        fileInputStream.close();
        bufferedOutputStream.close();
        fileOutputStream.close();
        return true;
    }
}

package quiz;

import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;

/**
 * @Author: nekotako
 * @Description: 给出一个字符串, 只包括大小写字母 计算字符串中,每个字符出现的次数,并以出现次数降序排序
 * @Date: 2023/10/19 19:34 星期四
 */

public class Sort {
    public static void main(String[] args) {
        String s = "abzxccasjlkjlexcvlphvcsddqfsdfwdasde";
        char[] charArray = s.toCharArray();
        TreeMap<Character, Integer> charMap = new TreeMap<>();
        for (int i = 0; i < charArray.length; i++) {
            if (charMap.containsKey(charArray[i])) {
                charMap.put(charArray[i], charMap.get(charArray[i]) + 1);
            } else {
                charMap.put(charArray[i], 1);
            }
        }
        // 对 charMap 进行排序
        ArrayList<Map.Entry<Character, Integer>> entries = new ArrayList<>(charMap.entrySet());
        entries.sort((o1, o2) -> o2.getValue() - o1.getValue());
        for (Map.Entry<Character, Integer> entry : entries) {
            System.out.print(entry.getKey() + "(" + entry.getValue() + ")");
        }

    }
}

package quiz;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.TreeSet;

/**
 * @Author: nekotako
 * @Description: String默认按照每位ASCII进行排序,要求按照对应的数值大小进行排序
 * @Date: 2023/10/19 16:41 星期四
 */

public class StringSort {
    public static void main(String[] args) {
        List<String> list = new ArrayList<String>();
        list.add("1");
        list.add("2");
        list.add("10");
        list.add("12");
        list.add("3");
        TreeSet<String> strings = new TreeSet<>(list);
        // 1 10 12 2 3
        list = new ArrayList<>(strings);
        System.out.println(strings);
        list.sort((o1, o2) -> Integer.parseInt(o1) - Integer.parseInt(o2));
        // TODO 在这里加入一些代码使下面的输出变成 1 2 3 10 12(不能删除数据和新增数据)
        System.out.println(list);
    }
}

package quiz;

import java.util.ArrayList;
import java.util.TreeMap;

/**
 * @Author: nekotako
 * @Description: 杨辉三角, 使用Map和List实现
 * @Date: 2023/10/19 16:52 星期四
 */

@SuppressWarnings({"unchecked"})
public class Triangle {
    public static void main(String[] args) {
        TreeMap<Integer, ArrayList<Integer>> triangle = new TreeMap<>();
        for (int i = 1; i < 11; i++) {
            ArrayList<Integer> list = new ArrayList<>();
            if (i == 1)
                list.add(1);
            else if (i == 2) {
                list.add(1);
                list.add(1);
            } else {
                for (int j = 0; j <= i - 1; j++) {
                    if (j == 0 || j == i - 1)
                        list.add(1);
                    else {
                        ArrayList<Integer> temp = triangle.get(i - 1);
                        list.add(temp.get(j) + temp.get(j - 1));
                    }
                }
            }
            triangle.put(i, list);
        }
        System.out.println(triangle);
    }
}

package serialize;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;


public class Serialize {
    public static void main(String[] args) throws IOException {
        FileOutputStream fileOutputStream = new FileOutputStream("./resources/serialized");
        ObjectOutputStream oos = new ObjectOutputStream(fileOutputStream);
        
        User zs = new User("张三", 18, "上海市", 13919248748L);
        oos.writeObject(zs);
        System.out.println("序列化完成");
    }
}

package serialize;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class UnSerialize {
    public static void main(String[] args) throws IOException, ClassNotFoundException {

        FileInputStream fileInputStream = new FileInputStream(new File("./resources/serialized"));
        ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
        User user = (User) objectInputStream.readObject();
        System.out.println(user);
        System.out.println(new BufferedInputStream(objectInputStream).available());
    }
}

package serialize;

import java.io.Serializable;

public class User implements Serializable {

    private static final long serializeUID = 2;

    private String name;
    private int age;
    private String address;
    private long phone;
    
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public long getPhone() {
        return phone;
    }

    public void setPhone(long phone) {
        this.phone = phone;
    }

    public User() {
    }

    public User(String name, int age, String address, long phone) {
        this.name = name;
        this.age = age;
        this.address = address;
        this.phone = phone;
    }

    @Override
    public String toString() {
        return "User [name=" + name + ", age=" + age + ", address=" + address + ", phone=" + phone + "]";
    }
    
    
}

package a;/**
* @Author: nekotako
* @Description: TODO
* @Date: 2023/9/20 18:34 星期三
*/

public class MyArrayList {
}

import org.junit.Test;

public class Arrays {
    public static void main(String[] args) {
        System.out.println(args.length);
    }
    @Test
    public void arrays(){
        int[] a = {1,2,3,4,5};
        a = new int[6];
        // a = null;
        System.out.println(a[0]);
        NullPointerException n = new NullPointerException("null");
        n.getClass();
    }
}

public class Array_06 {
	public static void main(String[] args) {
		int[] src = { 1, 2, 3, 4, 5, 6, 7, 8 };
		int[] dest = { 11, 12, 13, 14, 15, 16, 17, 18 };
		dest = arraycopy(src, 1, dest, 2, 3);
		for (int i = 0; i < dest.length; i++) {
			// 11, 12, 2, 3, 4, 13, 14, 15, 16, 17, 18
			System.out.print(dest[i] + " ");
		}
	}

	/**
	 * 数组插入式复制
	 * 
	 * @param src       源数组
	 * @param srcIndex  源数组 起始索引(包含)
	 * @param dest      目标数组
	 * @param destIndex 目标数组 起始索引(插入到该索引之后)
	 * @param length    插入个数
	 * @return 返回新的数组,因为数组长度一旦确定,长度不可更改,既然是插入数据,肯定会扩大长度,所以只能新建数组,用于容纳更多的元素
	 *         并把新数组地址返回给调用处
	 */
	public static int[] arraycopy(int[] src, int srcIndex, int[] dest, int destIndex, int length) {
		// 1 确定新数组长度,并创建新数组
		// 新长度为 dest.length + length
		int[] newDest = new int[dest.length + length];

		// 2 把目标数组起始位置之前的数据,全部拿到新数组中(包含)
		int i = 0;
		for (; i < destIndex; i++) {
			newDest[i] = dest[i];
		}
		int j = i;
		// 3 把源数组起始位置(包含)开始,复制到新数组中,复制length个
		// 此时 向newDest添加元素时需从i开始
		for (; i < srcIndex + length + 1; i++) {
			// 新数组起始位置为 : 目标数组起始索引 + 1
			newDest[i] = src[i - 1];
		}

		for (int k = 0; k < newDest.length; k++) {
			System.out.print(newDest[k] + " ");
		}
		System.out.println();
		// 4 把目标数组起始位置之后的数据,添加到新数组中
		// 原dest向newDest复制元素是要从索引j开始

		for (; j < dest.length; i++) {
			newDest[i] = dest[j];
			j++;
		}
		return newDest;
	}

}

import java.util.Scanner;

import org.junit.Test;


public class Coding  {

    public static void main(String[] args) {
    //    Coding c = new Coding();
    //    c.cycling();
    System.out.println(args);
    System.gc();
    }

    public void judge() {
        Scanner input = new Scanner(System.in);
        System.out.print("输入成绩");
        double score = input.nextDouble();
        int i = (int) (score / 10);
        Math.round(i);
        switch (i) {
            case 10:
                System.out.println(10);
                break;
            case 9:
                System.out.println(9);
                break;
            case 8:
                System.out.println(8);
                break;
            case 7:
                System.out.println(7);
                break;
            case 6:
                System.out.println(6);
                break;
            default:
                System.out.println(0);
                break;
        }
        input.close();
    }

    @Test
    public void cycling() {
        int sum = 0;
        for (int i = 1; i <= 100; i += 2) {
            sum += i;
        }
        System.out.println(sum);
    }

    // @Test
    // public int m1(){
    //     System.out.println("");
    //     System.out.println(2);
    //     return 1;
    // }
}
interface A{

}
abstract class B{

}

package com.tledu.model;

public class User {
    private String username;
    private String password;
    private String nickname;
    private int age;
    private String addr;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getNickname() {
        return nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getAddr() {
        return addr;
    }

    public void setAddr(String addr) {
        this.addr = addr;
    }

    static public void login(User user) {
        if (user.username.equals("admin")) {
            if (user.username.equals("root")) {
                System.out.println("登陆成功");
            } else {
                System.out.println("密码不对");
            }
        } else {
            System.out.println("用户名不正确");
        }
    }
    // public void login(User user) {
    // if (username.equals("admin")) {
    // if (password.equals("root")) {
    // System.out.println("登陆成功");
    // } else {
    // System.out.println("密码不对");
    // }
    // } else {
    // System.out.println("用户名不正确");
    // }
    // }
}

package com.tledu;

import com.tledu.model.User;

public class Test {
    public static void main(String[] args) {
        User u = new User("admin","root");
        // u.login(u);
        User.login(u);
    }
}

package design;

public class Single {
	public static void main(String[] args) throws ClassNotFoundException {
		// System.out.println(Single_01.getObj());
		// System.out.println(Single_01.getObj());
		// System.out.println(Single_02.getObj());
		// System.out.println(Single_02.getObj());
		Class.forName("design.Single_01");
		Class.forName("design.Single_02");
	}
}

/**
 * Single_01 饿汉模式
 */
class Single_01 {
	private void Single_01() {
		System.out.println("Single_01构造方法执行");
	}

	static Single_01 obj = new Single_01();

	static Single_01 getObj() {
		return obj;
	}
}

/**
 * Single_02 懒汉模式
 */
class Single_02 {
	private void Single_02() {
		System.out.println("Single_02构造方法执行");
	}

	private static Single_02 obj = null;

	static Single_02 getObj() {
		if (obj == null) {
			obj = new Single_02();
		}
		return obj;
	}
}
package fifteen;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

public class TenMinAgo {
	public static void main(String[] args) {

		Date nowDate = new Date();
		Date tenMinAgo = new Date(nowDate.getTime() - 6000 * 10 * 10);
		SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
		// 转换时区 设置东八时
		dateFormat.setTimeZone(TimeZone.getTimeZone("Etc/GMT-8"));
		System.out.println("当前时间为：" + dateFormat.format(nowDate));
		System.out.println("十分钟前为：" + dateFormat.format(tenMinAgo));
	}
}

package fifteen;

import java.util.Random;

public class Verification {
	public static void main(String[] args) {
		Random random = new Random(20001008);
		char[] c = new char[4];
		System.out.println("当前验证码是：");
		for (int i = 0; i < c.length; i++) {
			c[i] = (char) ((random.nextInt(26)) + 97);
			System.out.print(c[i]);
		}
		System.out.print("请输入验证码：");
		
	}
}

public class fifteen {
	
}

import java.io.FileInputStream;
import java.io.IOException;

public class FileInput {
	public static void main(String[] args) throws IOException {
		FileInputStream fis1 = null;
		try (FileInputStream fis = new FileInputStream("D:\\荣耀\\Documents\\IdeaProjects\\Loafer\\Nonka\\src\\FileInput.java")) {
			System.out.println(fis.read());
			fis1 = fis;
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println(fis1.read());
	}
}

package five;

import org.junit.Test;

public class Arrays {
    public static void main(String[] args) {
        System.out.println(args.length);
    }
    @Test
    public void arrays(){
        int[] a = {1,2,3,4,5};
        a = new int[6];
        // a = null;
        System.out.println(a[0]);
        NullPointerException n = new NullPointerException("null");
        n.getClass();
    }
}

package five;

public class Array_06 {
	public static void main(String[] args) {
		int[] src = { 1, 2, 3, 4, 5, 6, 7, 8 };
		int[] dest = { 11, 12, 13, 14, 15, 16, 17, 18 };
		dest = arraycopy(src, 1, dest, 2, 3);
		for (int i = 0; i < dest.length; i++) {
			// 11, 12, 2, 3, 4, 13, 14, 15, 16, 17, 18
			System.out.print(dest[i] + " ");
		}
	}

	/**
	 * 数组插入式复制
	 * 
	 * @param src       源数组
	 * @param srcIndex  源数组 起始索引(包含)
	 * @param dest      目标数组
	 * @param destIndex 目标数组 起始索引(插入到该索引之后)
	 * @param length    插入个数
	 * @return 返回新的数组,因为数组长度一旦确定,长度不可更改,既然是插入数据,肯定会扩大长度,所以只能新建数组,用于容纳更多的元素
	 *         并把新数组地址返回给调用处
	 */
	public static int[] arraycopy(int[] src, int srcIndex, int[] dest, int destIndex, int length) {
		// 1 确定新数组长度,并创建新数组
		// 新长度为 dest.length + length
		int[] newDest = new int[dest.length + length];

		// 2 把目标数组起始位置之前的数据,全部拿到新数组中(包含)
		int i = 0;
		for (; i < destIndex; i++) {
			newDest[i] = dest[i];
		}
		int j = i;
		// 3 把源数组起始位置(包含)开始,复制到新数组中,复制length个
		// 此时 向newDest添加元素时需从i开始
		for (; i < srcIndex + length + 1; i++) {
			// 新数组起始位置为 : 目标数组起始索引 + 1
			newDest[i] = src[i - 1];
		}

		for (int k = 0; k < newDest.length; k++) {
			System.out.print(newDest[k] + " ");
		}
		System.out.println();
		// 4 把目标数组起始位置之后的数据,添加到新数组中
		// 原dest向newDest复制元素是要从索引j开始

		for (; j < dest.length; i++) {
			newDest[i] = dest[j];
			j++;
		}
		return newDest;
	}

}

package five;

public class Reverse {
    public static void main(String[] args) {
        int[] array = { 1, 2, 3, 4, 5, 6, 7 };
        reverse(array);
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
    }

    // 数组为传址方式 无需返回值
    static void reverse(int[] arr) {
        int a;
        for (int i = (arr.length - 1); i >= arr.length / 2; i--) {
            a = arr[i];
            arr[i] = arr[arr.length - i - 1];
            arr[arr.length - i - 1] = a;
        }
    }
}

package five;

public class Scores {
    public static void main(String[] args) {
        double[] scores = { 55.5, 65.8, 78.4, 99, 100, 95.4, 65, 98, 78, 90 };
        System.out.println("最高分数: "+maxValue(scores));
        System.out.println("最低分数: "+minValue(scores));
        System.out.println("总分: "+sumValue(scores));
        System.out.println("平均分: "+avgValue(scores));
        System.out.println("成绩大于80分的人: "+num(scores));

    }

    static double maxValue(double[] array) {
        double maxVal = array[0];
        for (int i = 0; i < array.length; i++) {
            if (array[i] > maxVal) {
                maxVal = array[i];
            }
        }
        return maxVal;
    }

    static double minValue(double[] array) {
        double minVal = array[0];
        for (int i = 0; i < array.length; i++) {
            if (array[i] < minVal) {
                minVal = array[i];
            }
        }
        return minVal;
    }

    static double sumValue(double[] array) {
        double sum = 0;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }
        return sum;
    }

    static double avgValue(double[] array) {
        return sumValue(array) / array.length;
    }

    static int num(double[] array) {
        int sum = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] < 80) {
                sum += 1;
            }
        }
        return sum;
    }
}

package five;

public class WordsSplit {
    public static void main(String[] args) {
        String string = "Hello World Minecraft google alphabet";
        toCharArr(string);
    }

    static int toCharArr(String str) {

        if (str == null)
            return 0;
        int start = 0, end = 0, res = 0;
        while (end < str.length()) {
            while (end < str.length() && str.charAt(end) != ' ') {
                end++;
            }
            if (start != end) {
                res = end - start;
            }
            end++;
            start = end;
        }
        return res;
    }
}

package five;

public class YangHui {
    public static void main(String[] args) {
        int[][] arr = new int[7][];
        for (int i = 0; i < 7; i++) {
            arr[i] = new int[i + 1];
            for (int j = 0; j < arr[i].length; j++) {
                if (j == 0 || arr[i].length - 1 == j) {
                    arr[i][j] = 1;
                } else {
                    arr[i][j] = arr[i-1][j-1]+arr[i-1][j];
                }
            }
        }
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }
}

package four;

import java.util.Scanner;

public class Compare {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("输入第一个数：");
        double a = input.nextDouble();
        System.out.print("输入第二个数：");
        double b = input.nextDouble();
        System.out.println(compare(a, b));
        input.close();
    }

    static boolean compare(double a, double b) {
        return a == b;
    }
}

package four;

import java.util.Scanner;

public class Factorial {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("输入: ");
        int num = input.nextInt();
        System.out.println("阶乘是: "+factorial(num));
        input.close();
    }

    public static int factorial(int n) {
        if (n == 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }
}

package four;

import java.util.Scanner;

public class InputSum {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("输入: ");
        int num = input.nextInt();
        System.out.println(inputSum(num));
        input.close();
    }

    static int inputSum(int num) {
        if (num == 1) {
            return 1;
        }
        System.out.println(num);
        return num + inputSum(num - 1);
    }
}

package four;

import java.util.Scanner;

public class PrimeNumber {
    public static void main(String[] args) {
        System.out.print("输入数字：");
        Scanner input = new Scanner(System.in);
        System.out.println(judge(input.nextInt()));
        input.close();
    }

    static boolean judge(int num) {
        for (int i = 2; i < num; i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}

package four;

import java.util.Scanner;

public class SplitPrint {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("请输入: ");
        int num = input.nextInt();
        splitPrint(num);
        input.close();

    }

    static void splitPrint(int a) {
        if (a <= 9) {
            System.out.println(a);
            return;
        }
        int m = a % 10;
        int x = a / 10;
        splitPrint(x);
        System.out.println(m);
    }
}

package four;

public class Sum {
    public static void main(String[] args) {
        System.out.println(sum(10));
    }

    static int sum(int num) {
        if (num == 1) {
            return 1;
        }
        System.out.println(num);
        return num + sum(num - 1);
    }
}

package four;

public class Zuoye {
    public static void main(String[] args) {
        // 1.n的阶乘
        /*
         * int result = factorial(3);
         * System.out.println(result);
         */

        // 2.递归求1+2+3+…+10
        /*
         * int result1 = sum(3);
         * System.out.println(result1);
         */

        // 3.按顺序打印一个数字的每一位(例如1234 打印出1 2 3 4)
        /* obtainBit(1234); */

        // 4.实现代码:写一个递归方法,输入一个非负整数,返回组成它的数字之和
        /*
         * int result = numSum(1234);
         * System.out.println(result);
         */

        // 5.判断传递的参数值在斐波那契数列的第几位上
        /*
         * int result = findFibonacciIndex(5);
         * System.out.println(result);
         */

        // 方法联系
        /* eq(1,1); */

        /* zhishu(3); */

    }

    // n的阶乘
    public static int factorial(int n) {
        if (n == 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }

    // 递归求1+2+3+…+10
    public static int sum(int n) {
        if (n == 1) {
            return 1;
        }
        return n + sum(n - 1);
    }

    // 按顺序打印一个数字的每一位(例如1234 打印出1 2 3 4)
    public static void obtainBit(int a) {
        if (a <= 9) {
            System.out.println(a);
            return;
        }
        int m = a % 10;
        int x = a / 10;
        obtainBit(x);
        System.out.println(m);
    }

    // 实现代码:写一个递归方法,输入一个非负整数,返回组成它的数字之和
    public static int numSum(int n) {
        if (n <= 9) {
            return n;
        }
        int m = n % 10;
        int x = n / 10;
        return m + numSum(x);
    }

    // 判断传递的参数值在斐波那契数列的第几位上
    public static int findFibonacciIndex(int num) {
        if (num < 0) {
            return -1;
        }
        return findFibonacciIndexRecursive(num, 0, 1, 1);
    }

    private static int findFibonacciIndexRecursive(int num, int a, int b, int index) {
        if (a == num) {
            return index;
        } else if (a > num) {
            return -1;
        } else {
            return findFibonacciIndexRecursive(num, b, a + b, index + 1);
        }
    }

    // 方法作业
    public static void eq(int x, long y) {
        if (x == y) {
            System.out.println("相等");
        } else {
            System.out.println("不相等");
        }
    }

    // 判断是否为质数
    public static void zhishu(int n) {
        int i = 2;
        for (; i < n; i++) {
            if (n % i == 0) {
                System.out.println(n + "不是质数");
                break;
            }
        }
        if (i == n) {
            System.out.println(n + "是质数");
        }

    }

}

package hotel;

public class Hotel {
    Room[][] list;

    // public Methods(int floor, int door) {
    // 	createHotal(floor, door);
    // }

    public Room[][] createHotel(int floor, int door) {
        list = new Room[floor][door];
        for (int i = 0; i < list.length; i++) {
            int id = 1;
            if (i < 2) {
                for (int j = 0; j < list[i].length; j++) {
                    list[i][j] = new Room(i + 1, id++, 1, false);
                }
            } else if (i >= 2 && i < 4) {
                for (int j = 0; j < list[i].length; j++) {
                    list[i][j] = new Room(i + 1, id++, 2, false);
                }
            } else {
                for (int j = 0; j < list[i].length; j++) {
                    list[i][j] = new Room(i + 1, id++, 3, false);
                }
            }
        }
        return list;
    }

    public void booking(int room) {
        int floor = room / 100 - 1;
        int door = room % 100 - 1;
        if (!list[floor][door].isStatus()) {
            list[floor][door].setStatus(true);
            System.out.println("预订" + room + "成功");
        } else {
            System.out.println("预订" + room + "失败");
        }
    }

    public void cancel(int room) {
        int floor = room / 100 - 1;
        int door = room % 100 - 1;
        if (list[floor][door].isStatus()) {
            list[floor][door].setStatus(false);
            System.out.println("退订" + room + "成功");
        } else {
            System.out.println("退订" + room + "失败");
        }
    }
}

package hotel;

public class Room {
    private int floor;
    private int id;
    private int type;
    private boolean status;

    public Room() {
    }

    /**
     * @param floor  楼层号
     * @param id     房间号
     * @param type   房间类型
     *               1-标准间 2-双人间 3-豪华间
     * @param status 房间状态
     */
    public Room(int floor, int id, int type, boolean status) {
        this.floor = floor;
        this.id = id;
        this.type = type;
        this.status = status;
    }

    public int getFloor() {
        return floor;
    }

    public void setFloor(int floor) {
        this.floor = floor;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean isStatus() {
        return status;
    }

    public void setStatus(boolean status) {
        this.status = status;
    }

    @Override
    public String toString() {
        String content = null;
        String level = null;
        if (type == 1) {
            level = "标准间";
        } else if (type == 2) {
            level = "双人间";
        } else if (type == 3) {
            level = "豪华间";
        }

        if (id < 10)
            content = " [" + floor + "0" + id + " " + level + " " + (status ? "占用" : "空闲") + "] ";
        else
            content = " [" + floor + "" + id + " " + level + " " + (status ? "占用" : "空闲") + "] ";
        return content;
    }

}

package hotel;

import java.util.Scanner;

public class Run {

    static Hotel m = new Hotel();
    static Room[][] room;

    public static void main(String[] args) {
        Run run = new Run();
        room = m.createHotel(5, 10);
        while (true) {
            System.out.println("----------酒店预订系统-----------");
            run.infoPrint();
            System.out.println("---------------------------------");
            System.out.print("请输入操作格式为 预订 101  /  退订 201: ");
            String operate = new Scanner(System.in).nextLine();
            String[] s = operate.split(" ");
            if (s[0].equals("预订")) {
                m.booking(Integer.parseInt(s[1]));
            } else if ((s[0].equals("退订"))) {
                m.cancel(Integer.parseInt(s[1]));
            } else
                break;
        }
    }

    void infoPrint() {
        for (int i = 0; i < room.length; i++) {
            for (int j = 0; j < room[i].length; j++) {
                System.out.print(room[i][j]);
            }
            System.out.println();
        }
    }
}

package innerclass;

public class OuterClass {
	int b = 1;
	public static void main(String[] args) {
		
	}
	public void method(){
		int a = 1;
		class InnerClass {
			public void me(){
				System.out.println(a);
				System.out.println(b);
			}
		}
	}
}

package leetcode;

/**
 * @Author: nekotako
 * @Description: TODO
 * @Date: 2023/10/9 9:51 星期一
 */

public class MergeArrays {
    public MergeArrays() {
    }

    public static void main(String[] args) {
        int[] nums1 = new int[]{1, 2, 3, 0, 0, 0};
        int[] nums2 = new int[]{2, 5, 6};
        nums1 = merge(nums2, nums1, 3, 3);

        for(int i = 0; i < nums1.length; ++i) {
            System.out.print(nums1[i] + " ");
        }

    }

    static int[] merge(int[] originArrays, int[] targetArrays, int originIndex, int targetIndex) {
        targetArrays = bubbleSort(targetArrays);

        for(int i = 0; i < originArrays.length; ++i) {
            targetArrays[i] = originArrays[i];
        }

        targetArrays = bubbleSort(targetArrays);
        return targetArrays;
    }

    static int[] bubbleSort(int[] arr) {
        for(int i = 1; i < arr.length; ++i) {
            boolean flag = true;

            for(int j = 0; j < arr.length - i; ++j) {
                if (arr[j] > arr[j + 1]) {
                    int tmp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = tmp;
                    flag = false;
                }
            }

            if (flag) {
                break;
            }
        }

        return arr;
    }
}


package leetcode;

/**
 * @Author: nekotako
 * @Description: TODO
 * @Date: 2023/10/9 9:52 星期一
 */

public class NoRepeatArray {
}

package leetcode;

/**
 * @Author: nekotako
 * @Description: TODO
 * @Date: 2023/10/9 9:52 星期一
 */

public class OnlyOnce {
}

package leetcode;

/**
 * @Author: nekotako
 * @Description: TODO
 * @Date: 2023/10/9 9:54 星期一
 */

public class Plus {
    public Plus() {
    }

    public static void main(String[] args) {
        int[] arr = new int[]{9, 9};
        arr = plus(arr);
    }

    static int[] plus(int[] array) {
        for(int i = array.length - 1; i >= 0; --i) {
            if ((array[i] = ++array[i] % 10) != 0) {
                return array;
            }
        }

        array = new int[array.length + 1];
        array[0] = 1;
        return array;
    }
}


package oop;

/**
 * @Author: nekotako
 * @Description: TODO
 * @Date: 2023/10/9 9:50 星期一
 */

public class PersonInfo {
    private String name;
    private int sex;
    private int age;
    private String address;
    private String degree;

    public PersonInfo(String name, int sex, int age, String address, String degree) {
        this.name = name;
        this.sex = sex;
        this.age = age;
        this.address = address;
        this.degree = degree;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getSex() {
        return this.sex;
    }

    public void setSex(int sex) {
        this.sex = sex;
    }

    public int getAge() {
        return this.age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getDegree() {
        return this.degree;
    }

    public void setDegree(String degree) {
        this.degree = degree;
    }
}


package oop;

/**
 * @Author: nekotako
 * @Description: TODO
 * @Date: 2023/10/9 20:16 星期一
 */

public class Poly {
    public static void main(String[] args) {
        Sup sub = new Sub();
        System.out.println(sub.age);
        sub.m1();
        sub.m2();
//        sub.m3();
    }
}
class Sup{
    int age = 2;
    public void m1(){
        System.out.println("Father m1");
    }
    public void m2(){
        System.out.println("Father m2");
    }
}
class Sub extends Sup{
    int age = 1;
    public void m2(){
        System.out.println("Son m2");
    }
    public void m3(){
        System.out.println("Son m3");
    }
}

public class ReturnTest {
    public static void main(String[] args) {
        
    }
}

package six;

import java.util.Arrays;

public class Search {
    public Search() {
    }

    public static void main(String[] args) {
        int[] arr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        long stime = System.nanoTime();
        System.out.println(binarySearch(arr, 9));
        long etime = System.nanoTime();
        Arrays.sort(arr);
        System.out.println(etime - stime);
    }

    static int oneByOneSearch(int[] array, int target) {
        for (int i = 0; i < array.length; ++i) {
            if (array[1] == target) {
                return i;
            }
        }
        return -1;
    }

    static int binarySearch(int[] array, int target) {
        int startIndex = 0;
        int endIndex = array.length - 1;
        int index = (startIndex + endIndex) / 2;
        for (int i = 0; i < array.length; i++) {
            if (target > array[index]) {
                startIndex = index + 1;
            } else if (target < array[index]) {
                endIndex = index - 1;
            } else if (target == array[index]) {
                return index;
            }
            index = (startIndex + endIndex) / 2;
        }
        return -1;
    }
}

package six;

public class Sort {
    public static void main(String[] args) {
        int[] oldArr = { 7, 5, 6, 9, 3, 2, 33, 56, 93, 12, 1, 0 };
        selectSort(oldArr);
    }

    static void selectSort(int[] arr) {
        int[] newArr = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            newArr[i] = arr[i];
        }
        for (int i = 0; i < newArr.length; i++) {

            for (int k = 0; k < newArr.length; k++) {
                System.out.print(newArr[k] + " ");
            }
            System.out.println();


            // 当前循环中的最小值
            int minVal = newArr[i];
            // 当前循环中的最大值
            int maxVal = 0;
            for (int j = i; j < newArr.length; j++) {
                // 如果当前最小值大于遍历时获得的值 则将当前值赋给最小值
                // 并交换顺序
                if (minVal > newArr[j]) {
                    minVal = newArr[j];

                    maxVal = newArr[i];
                    newArr[i] = minVal;
                    newArr[j] = maxVal;
                }
            }
        }
    }
}

public class STR {
	public static void main(String[] args) {
		String s = new String("asd");
		StringBuffer sb = new StringBuffer(s);
		sb.capacity();
		sb.append("null");
	}
}

package three;
public class Cash {
    public static void main(String[] args) {
        int day = 1;
        double sum = 0;
        for (; sum <= 100; day++) {
            sum += 2.5;
            if (day % 5 == 0) {
                sum -= 6;
            }
            // System.out.println(day + "----->" + sum);
        }
        System.out.println("共花了" + (day - 1) + "天存储了100元");
    }
}

package three;
public class Horse {
    public static void main(String[] args) {
        for (int big = 1; big <= 33; big++)
            for (int mid = 1; mid <= 50; mid++)
                for (double small = 3; small <= 100; small++)
                    if (big * 3 + mid * 2 + small / 3 == 100) {
                        if (big + mid + small == 100 && small % 3 == 0) {
                            System.out.println("大马数:" + big + " 中马数:" + mid + " 小马数:" + small);
                        }
                    }
    }
}
package three;
public class Paper {
    public static void main(String[] args) {
        int mountainHeight = 8848;
        double paperHeight = 0.01;
        int i = 1;
        for (; paperHeight <= mountainHeight; i++)
            paperHeight = paperHeight * 2;
        System.out.println("折叠" + (i - 1) + "次，就可以保证厚度不低于珠穆朗玛峰的高度");
    }
}

package three;
public class Plus {
    public static void main(String[] args) {
        int sum = 0;
        for (int i = 1; i <= 100; i++)
            sum += i;
        System.out.println("1-100之间的加和是" + sum);
        System.out.println("1-100之间的所有奇数和是" + (sum / 2 - 25));
    }
}

