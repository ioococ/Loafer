4.  Session
4.1  概念
上面讲的Cookie是用于客户端的会话技术,现在我们来学习一下服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession
4.2  快速入门
		1. 获取HttpSession对象：
			HttpSession session = request.getSession();
		2. 使用HttpSession对象：
			Object getAttribute(String name)  
			void setAttribute(String name, Object value)
			void removeAttribute(String name)  
4.3  原理
Session的实现是依赖于Cookie的。
4.4  细节
4.4.1  当客户端关闭后，服务器不关闭，两次获取session是否为同一个？
		默认情况下。不是。
		如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。
			  Cookie c = new Cookie("JSESSIONID",session.getId());
		      c.setMaxAge(60*60);
		      response.addCookie(c);

4.4.2  客户端不关闭，服务器关闭后，两次获取的session是同一个吗？

		不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作
			session的钝化：
				在服务器正常关闭之前，将session对象系列化到硬盘上
			 session的活化：
				在服务器启动后，将session文件转化为内存中的session对象即可。
				
4.4.3  session什么时候被销毁？
		1. 服务器关闭
		2. session对象调用invalidate() 。
		3. session默认失效时间 30分钟
			选择性配置修改	
			<session-config>
			       <session-timeout>30</session-timeout>
			</session-config>
4.5  Session的特点
1. session用于存储一次会话的多次请求的数据，存在服务器端
2. session可以存储任意类型，任意大小的数据

session与Cookie的区别：
	1. session存储数据在服务器端，Cookie在客户端
	2. session没有数据大小限制，Cookie有4kb
	3. session数据安全，Cookie相对于不安全

4.6  验证码案例
4.6.1  案例需求
		1. 访问带有验证码的登录页面login.jsp
		2. 用户输入用户名，密码以及验证码。
			 如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误
			 如果验证码输入有误，跳转登录页面，提示：验证码错误
			 如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您


4.6.2 	分析
1 编写一个生成验证码的java程序
2 页面中通过js去请求验证码程序,完成验证码的生成并保存入session中(注意每次请求都需要加上一个时间,否则容易出现缓存问题)
3 登陆的时候,把验证码和用户名、密码都传递到servlet,并在servlet中获取
4 然后获得session中的验证码,和传递的验证码进行比较,如果成功再比较用户名和密码
5 不管成功还是失败都需要把session中的验证码都删除,由页面重新生成
6 再根据登陆成功还是失败 跳转对应的页面和响应的提示


五、总结
见JavaWEB第4天总结
六、作业
	作业：编写展示和添加程序

